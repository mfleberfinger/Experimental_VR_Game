__Overview of Tube Generation and Player/Tube Path__

As the object to which the TubeGenerator script is attached moves through space,
	segments of tube mesh are generated behind the object out to some maximum
	distance.
To avoid generating an endlessly growing mesh, each segment will be an individual
	mesh, which will be deleted some time after the player has passed through it.


The tube generator game object will follow the same path as
	the player (defined by some curve calculated based on a random seed
	and distance from the starting point, but will stay ahead of the player.
	- Calculate the center points in scene world space as follows, where
		(x, y, z) is the position in the Unity scene's world space, and
		xpx, xpy, ypx, and ypy are randomly generated at the start of
		the game and remain constant thereafter.
		x = PerlinBasedFunction(z + xpx, ypx) - PerlinBasedFunction(xpx, ypx)
		y = PerlinBasedFunction(z + xpy, ypy) - PerlinBasedFunction(xpy, ypy)
		+ The player's and tube generator's speed will be controlled along the
			z axis. The x and y coordinate will be chosen based on the current
			z coordinate. The tube generator will be made to face in the
			direction of travel (probably by calculating its next point based
			on the speed and facing that) to make sure the segment ends face in
			the correct directions. The player will be pulled along with some
			object that will always be kept on the path.


__Tube Generator__

As the object to which the TubeGenerator script is attached moves through space,
	segments of tube mesh are generated behind the object out to some maximum
	distance.
To avoid generating an endlessly growing mesh, each segment will be an individual
	mesh, which will be deleted some time after the player has passed through it.

It may be best to keep the game objects in an object pool and keep moving them
	and replacing their meshes, rather than deleting and creating them.

Process:
	- Start
		+ Tube generator is at its starting location.
		+ Nothing has been generated.
		+ Log current position as startOfSegment.
	- Movement occurs.
		+ While moving, poll tubeGenerator.transform.position.
		+ Compare position with startOfSegment.
		+ Once Vector3.Distance(position, startOfSegment) > segmentLength, go
			to next step.
			-> Alternatively, set a ringSpacing variable to determine distance
				between rings and make each segment of several rings rather than
				two. In this case, the ring position would be logged several
				times before going to the next step. The "Create segment" step
				would then use the logged positions to create several rings
				and connect them all to generate the mesh for the segment.
	- Create segment.
		+ Create a game object, positioned at startOfSegment.
		+ Create a ring of evenly spaced vertices, of diameter segmentDiameter,
			centered at (0, 0, 0) in local coordinates
			(i.e. transform.position of the new game object).
		+ Create a ring of evenly spaced vertices, of diameter segmentDiameter,
			centered at the current position of the tube generator:
				newGameObject.InverseTransformPoint(tubeGenerator.transform.Position).
		+ Join the two rings of vertices with edges, apply triangles, uvs, etc.
		+ Apply the mesh to the game object.
		+ Add a mesh collider to the segment to keep the player inside?
	- Reset for next segment.
		+ startOfSegment = tubeGenerator.transform.position
		+ Add new segment to queue of segments.
		+ If segmentQueue.Length > segmentMax, delete the oldest segment(s).
